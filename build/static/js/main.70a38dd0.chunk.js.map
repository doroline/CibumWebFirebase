{"version":3,"sources":["components/Menu.js","containers/App.js","global-styles.js","reportWebVitals.js","index.js"],"names":["Menu","props","SwipeableDrawer","anchor","open","menuVisibile","onClose","apriChiudiMenu","onOpen","List","ListItem","button","ListItemText","primary","Wrapper","styled","div","App","useState","setMenuVisibile","loading","className","onClick","GlobalStyles","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uOAyCeA,EAhCF,SAACC,GACZ,OACE,mCAOE,cAACC,EAAA,EAAD,CACEC,OAAO,QACPC,KAAMH,EAAMI,aACZC,QAAS,kBAAML,EAAMM,kBACrBC,OAAQ,kBAAMP,EAAMM,kBAJtB,SAOE,eAACE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CAAcC,QAAQ,eADH,QAGrB,cAACH,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CAAcC,QAAQ,aADH,WAGrB,cAACH,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CAAcC,QAAQ,uBADH,6B,2TCK/B,IAAMC,EAAUC,IAAOC,IAAV,KAcEC,EA3Cf,WAAe,MAE2BC,oBAAS,GAFpC,mBAENb,EAFM,KAEQc,EAFR,OAGiBD,oBAAS,GAH1B,mBAGNE,EAHM,KAKPb,GALO,KAKU,WAIrBY,GAAiBd,KAGnB,OACE,eAACS,EAAD,CAASO,UAAU,MAAnB,UACCD,GACC,kDAEAA,GACA,yBAAQC,UAAU,aAAlB,UAEE,cAAC,IAAD,CAAUC,QAAS,kBAAMf,OACzB,cAAC,EAAD,CAAMF,aAAcA,EAAcE,eAAgBA,W,yEC3B1D,IAIegB,EAJMC,YAAH,KCUHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.70a38dd0.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport styled from \"styled-components\";\n\nconst Menu = (props) => {\n  return (\n    <>\n      {/* \n        qui inizia il menu, con l'elemento SwipeableDrawer che contiene tutti i bottoni con i nomi delle sezione della mia APP \n        anchor indica la posizione da cui il menu si aprirà\n        open indica se il menu è aperto o chiuso\n        onClose e onOpen sono eventi legati allo swipe dell'utente (in generale per noi è importante invocare una sola funzione: apriChiudiMenu)\n      */}\n      <SwipeableDrawer\n        anchor=\"right\"\n        open={props.menuVisibile}\n        onClose={() => props.apriChiudiMenu()}\n        onOpen={() => props.apriChiudiMenu()}\n      >\n        {/* List svolge il ruolo di <ul> e ListItem quello di <li>: in questo caso potrei utilizzare una costante ed eseguire un .map per ciclarmi tutte le pagine della mia app che voglio elencare */}\n        <List>\n          <ListItem button key=\"Home\">\n            <ListItemText primary=\"Home page\" />\n          </ListItem>\n          <ListItem button key=\"Ricette\">\n            <ListItemText primary=\"Ricette\" />\n          </ListItem>\n          <ListItem button key=\"Lista della Spesa\">\n            <ListItemText primary=\"Lista della Spesa\" />\n          </ListItem>\n        </List>\n      </SwipeableDrawer>\n    </>\n  );\n}\n\nexport default Menu;\n","import { useState } from \"react\";\n\n// importiamo gli elementi di material ui che ci occorrono : il menu vero e proprio e gli elementi list, list item e list text per stilizzare i bottoni che avremo nel menu\nimport Menu from '../components/Menu';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport styled from 'styled-components';\n\nfunction App() {\n  // stato che utilizzeremo per aprire e chiudere il nostro menu laterale. Il menu può solo essere aperto o chiudo, perciò utilizzo un booleano (true/aperto, false/chiuso)\n  const [menuVisibile, setMenuVisibile] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const apriChiudiMenu = () => {\n    // con il punto esclamativo prima di una variabile andiamo a selezionare il valore opposto di un booleano \n    // (se il valore di menuVisibile è true, noi lo mettiamo a false)\n    // questo ci permette di non dover verificare prima di invocare questa funzione se dobbiamo aprire o chiudere il menu: lui lo capirà da solo!\n    setMenuVisibile(!menuVisibile);\n  };\n\n  return (\n    <Wrapper className=\"App\">\n    {loading && (\n      <div>IN CARICAMENTO</div>\n    )}\n    {!loading && (\n      <header className=\"app-header\">\n        {/* questo bottone determina l'apertura o la chiusura del menu*/}\n        <MenuIcon onClick={() => apriChiudiMenu()} />\n        <Menu menuVisibile={menuVisibile} apriChiudiMenu={apriChiudiMenu}/>\n      </header>\n      )}\n  \n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div`\n  .app-header {\n    background-color: #e0902c;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    padding: 20px;\n    font-size: 20px;\n    color: white;\n    text-align: right;\n  }\n\n`;\n\nexport default App;","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n\n`;\n\nexport default GlobalStyles;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport GlobalStyles from './global-styles';\n// import App2 from './containers/App2';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n    <GlobalStyles />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}